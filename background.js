// YouTube Blocker for Firefox
console.log('YouTube Blocker for Firefox initialized');

let isBlocking = true;
let timerMinutes = 60;
let timeSpentOnYouTube = 0;
let maxTimeSeconds = 0;
let isOnYouTubeTab = false;
let checkInterval = null;
let unlockUntilEndOfDay = false;
let timerSetToday = false; // –§–ª–∞–≥, —á—Ç–æ —Ç–∞–π–º–µ—Ä —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
let lastTimerSetDate = null; // –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSettings() {
    browser.storage.local.get(['isBlocking', 'timerMinutes', 'timeSpentOnYouTube', 'maxTimeSeconds', 'unlockUntilEndOfDay', 'timerSetToday', 'lastTimerSetDate']).then(data => {
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
        
        isBlocking = data.isBlocking !== undefined ? data.isBlocking : true;
        timerMinutes = data.timerMinutes || 60;
        timeSpentOnYouTube = data.timeSpentOnYouTube || 0;
        maxTimeSeconds = data.maxTimeSeconds || (timerMinutes * 60);
        unlockUntilEndOfDay = data.unlockUntilEndOfDay || false;
        timerSetToday = data.timerSetToday || false;
        lastTimerSetDate = data.lastTimerSetDate ? new Date(data.lastTimerSetDate) : null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        if (unlockUntilEndOfDay) {
            const now = new Date();
            const endOfDay = new Date();
            endOfDay.setHours(23, 59, 59, 999);
            
            if (now > endOfDay) {
                // –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                unlockUntilEndOfDay = false;
                console.log('‚è∞ –í—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏—Å—Ç–µ–∫–ª–æ (–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –¥–µ–Ω—å)');
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ timerSetToday
        if (timerSetToday && lastTimerSetDate) {
            const now = new Date();
            const lastSetDate = new Date(lastTimerSetDate);
            
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            if (now.toDateString() !== lastSetDate.toDateString()) {
                timerSetToday = false;
                console.log('üîÑ –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ timerSetToday (–Ω–æ–≤—ã–π –¥–µ–Ω—å)');
            }
        }
        
        saveSettings();
        updateIcon();
        startTabMonitoring();
        console.log('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { isBlocking, timerMinutes, timeSpentOnYouTube, maxTimeSeconds, unlockUntilEndOfDay, timerSetToday, lastTimerSetDate });
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è
function canSetTimerToday() {
    if (!timerSetToday) {
        return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∞ –ª–∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if (lastTimerSetDate) {
        const now = new Date();
        const lastSetDate = new Date(lastTimerSetDate);
        
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        if (now.toDateString() !== lastSetDate.toDateString()) {
            timerSetToday = false;
            return true;
        }
    }
    
    return false;
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
function unlockUntilEndOfDayFunction() {
    unlockUntilEndOfDay = true;
    
    console.log('üìÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è');
    
    saveSettings();
    updateIcon();
    refreshYouTubeTabs();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è
    scheduleEndOfDayReset();
}

// –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è
function scheduleEndOfDayReset() {
    const now = new Date();
    const endOfDay = new Date();
    endOfDay.setHours(23, 59, 59, 999);
    
    const timeUntilEndOfDay = endOfDay - now;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∫–æ–Ω–µ—Ü –¥–Ω—è
    setTimeout(() => {
        if (unlockUntilEndOfDay) {
            unlockUntilEndOfDay = false;
            console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –¥–µ–Ω—å)');
            saveSettings();
            updateIcon();
            refreshYouTubeTabs();
        }
    }, timeUntilEndOfDay);
}

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
function startTabMonitoring() {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (checkInterval) {
        clearInterval(checkInterval);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    checkInterval = setInterval(() => {
        browser.tabs.query({active: true, currentWindow: true}).then(tabs => {
            if (tabs.length > 0) {
                const activeTab = tabs[0];
                const url = activeTab.url || '';
                const wasOnYouTube = isOnYouTubeTab;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞ YouTube
                isOnYouTubeTab = url.includes('youtube.com') || url.includes('youtu.be');
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ YouTube –∏–ª–∏ —É—à–ª–∏ —Å YouTube
                if (isOnYouTubeTab !== wasOnYouTube) {
                    console.log(isOnYouTubeTab ? 'üì∫ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ YouTube' : 'üö™ –£—à–ª–∏ —Å YouTube');
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—É–Ω–¥—É –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ YouTube –∏ –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
                if (isOnYouTubeTab && isBlocking && !unlockUntilEndOfDay) {
                    timeSpentOnYouTube++;
                    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ YouTube. –í—Å–µ–≥–æ:', timeSpentOnYouTube, '/', maxTimeSeconds, '—Å–µ–∫');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏
                    if (timeSpentOnYouTube >= maxTimeSeconds) {
                        console.log('‚è∞ –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—á–µ—Ä–ø–∞–Ω! –ë–ª–æ–∫–∏—Ä—É–µ–º YouTube');
                        refreshYouTubeTabs();
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    if (timeSpentOnYouTube % 10 === 0) {
                        saveSettings();
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
                    updateIcon();
                }
            }
        }).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–∫–ª–∞–¥–æ–∫:', error);
        });
    }, 1000);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    const settings = {
        isBlocking: isBlocking,
        timerMinutes: timerMinutes,
        timeSpentOnYouTube: timeSpentOnYouTube,
        maxTimeSeconds: maxTimeSeconds,
        unlockUntilEndOfDay: unlockUntilEndOfDay,
        timerSetToday: timerSetToday,
        lastTimerSetDate: lastTimerSetDate ? lastTimerSetDate.toISOString() : null
    };
    
    browser.storage.local.set(settings).catch(error => {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    });
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (—Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function unlockForToday() {
    unlockUntilEndOfDayFunction(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
function setTimer(minutes) {
    if (minutes > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è
        if (!canSetTimerToday()) {
            console.log('üö´ –¢–∞–π–º–µ—Ä —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è');
            return false;
        }
        
        timerMinutes = minutes;
        maxTimeSeconds = minutes * 60;
        timeSpentOnYouTube = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏
        unlockUntilEndOfDay = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        timerSetToday = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —Ç–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        lastTimerSetDate = new Date(); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        saveSettings();
        updateIcon();
        refreshYouTubeTabs();
        console.log('‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:', maxTimeSeconds, '—Å–µ–∫—É–Ω–¥');
        return true;
    }
    return false;
}

// –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
function resetTimerFlag() {
    timerSetToday = false;
    lastTimerSetDate = null;
    saveSettings();
    console.log('üîÑ –§–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
function updateIcon() {
    const iconPath = "icons/border-48.png";
    
    if (!isBlocking) {
        browser.browserAction.setIcon({path: iconPath});
        browser.browserAction.setBadgeText({text: ""});
        return;
    }

    if (unlockUntilEndOfDay) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
        browser.browserAction.setIcon({path: iconPath});
        browser.browserAction.setBadgeText({text: "‚àû"});
        browser.browserAction.setBadgeBackgroundColor({color: "#FFA500"});
        return;
    }

    if (maxTimeSeconds > 0) {
        const secondsLeft = Math.max(0, maxTimeSeconds - timeSpentOnYouTube);
        const minutesLeft = Math.floor(secondsLeft / 60);
        
        if (secondsLeft <= 0) {
            browser.browserAction.setIcon({path: iconPath});
            browser.browserAction.setBadgeText({text: "üîí"});
            browser.browserAction.setBadgeBackgroundColor({color: "#FF0000"});
        } else {
            const badgeText = minutesLeft > 0 ? minutesLeft + "" : "<1";
            browser.browserAction.setBadgeText({text: badgeText});
            browser.browserAction.setBadgeBackgroundColor({color: "#4CAF50"});
        }
    } else {
        browser.browserAction.setIcon({path: iconPath});
        browser.browserAction.setBadgeText({text: "‚àû"});
        browser.browserAction.setBadgeBackgroundColor({color: "#4CAF50"});
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
function shouldBlockYouTube() {
    if (!isBlocking) {
        console.log('‚û°Ô∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
        return false;
    }
    
    if (unlockUntilEndOfDay) {
        console.log('‚û°Ô∏è –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è');
        return false;
    }
    
    if (maxTimeSeconds <= 0) {
        console.log('‚û°Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞');
        return false;
    }
    
    const shouldBlock = timeSpentOnYouTube >= maxTimeSeconds;
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', { 
        timeSpent: timeSpentOnYouTube, 
        maxTime: maxTimeSeconds,
        shouldBlock: shouldBlock
    });
    
    return shouldBlock;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è YouTube –≤–∫–ª–∞–¥–æ–∫
function refreshYouTubeTabs() {
    if (shouldBlockYouTube()) {
        browser.tabs.query({url: "*://*.youtube.com/*"}).then(tabs => {
            tabs.forEach(tab => {
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É YouTube:', tab.id, tab.url);
                browser.tabs.reload(tab.id);
            });
        }).catch(error => {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫:', error);
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
function handleRequest(details) {
    const url = details.url.toLowerCase();
    
    const isYouTube = url.includes('youtube.com') || url.includes('youtu.be');
    
    if (!isYouTube) {
        return {cancel: false};
    }
    
    const isMainPage = 
        url === 'https://www.youtube.com/' ||
        url === 'http://www.youtube.com/' ||
        url === 'https://youtube.com/' ||
        url === 'http://youtube.com/' ||
        url.includes('/watch?') ||
        url.includes('/watch/') ||
        url.includes('/results?') ||
        url.includes('/shorts/') ||
        url.includes('/channel/') ||
        url.includes('/user/') ||
        url.includes('/c/');
    
    const isTechnicalRequest = 
        url.includes('/api/') ||
        url.includes('/youtubei/') ||
        url.includes('/stats/') ||
        url.includes('/embed/') ||
        url.includes('.ggpht.com') ||
        url.includes('i.ytimg.com') ||
        url.includes('googlevideo.com') ||
        url.includes('gstatic.com') ||
        url.includes('accounts.youtube.com');
    
    if (isTechnicalRequest) {
        return {cancel: false};
    }
    
    const shouldBlock = shouldBlockYouTube();
    
    if (isMainPage && shouldBlock) {
        console.log('üéØ –ë–õ–û–ö–ò–†–£–ï–ú YouTube (—Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫)');
        const redirectUrl = browser.runtime.getURL("stop.html");
        return {redirectUrl: redirectUrl};
    }
    
    return {cancel: false};
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
browser.runtime.onMessage.addListener((message, sender, sendResponse) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
    
    const processMessage = async () => {
        try {
            if (message.action === "toggleBlocking") {
                isBlocking = message.value;
                await saveSettings();
                updateIcon();
                refreshYouTubeTabs();
                return {success: true};
            }
            else if (message.action === "setTimer") {
                const success = setTimer(parseInt(message.minutes));
                return {success: success, timerSetToday: timerSetToday};
            }
            else if (message.action === "disableForToday") {
                unlockForToday();
                return {success: true};
            }
            else if (message.action === "getStatus") {
                const secondsLeft = Math.max(0, maxTimeSeconds - timeSpentOnYouTube);
                const minutesLeft = Math.floor(secondsLeft / 60);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
                let timeUntilEndOfDay = null;
                if (unlockUntilEndOfDay) {
                    const now = new Date();
                    const endOfDay = new Date();
                    endOfDay.setHours(23, 59, 59, 999);
                    timeUntilEndOfDay = Math.floor((endOfDay - now) / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                }
                
                return {
                    isBlocking: isBlocking,
                    timerMinutes: timerMinutes,
                    timeSpentOnYouTube: timeSpentOnYouTube,
                    maxTimeSeconds: maxTimeSeconds,
                    secondsLeft: secondsLeft,
                    minutesLeft: minutesLeft,
                    isOnYouTube: isOnYouTubeTab,
                    isBlocked: shouldBlockYouTube(),
                    unlockUntilEndOfDay: unlockUntilEndOfDay,
                    timeUntilEndOfDay: timeUntilEndOfDay,
                    timerSetToday: timerSetToday,
                    canSetTimer: canSetTimerToday()
                };
            }
            else if (message.action === "unlockForToday") {
                unlockForToday();
                return {success: true};
            }
            else if (message.action === "unlockUntilEndOfDay") {
                unlockUntilEndOfDayFunction();
                return {success: true};
            }
            else if (message.action === "resetTimer") {
                timeSpentOnYouTube = 0;
                unlockUntilEndOfDay = false;
                saveSettings();
                updateIcon();
                return {success: true};
            }
            else if (message.action === "resetTimerFlag") {
                resetTimerFlag();
                return {success: true};
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            return {success: false, error: error.message};
        }
    };
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    processMessage().then(sendResponse);
    return true;
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
browser.webRequest.onBeforeRequest.addListener(
    handleRequest,
    {urls: ["<all_urls>"]},
    ["blocking"]
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadSettings();